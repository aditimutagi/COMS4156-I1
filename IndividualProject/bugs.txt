Documentation for all bugs found:

Course.java:
    isCourseFull(): incorrect comparison
        original: enrollmentCapacity > enrolledStudentCount;
        modified: enrolledStudentCount >= enrollmentCapacity;
    enrollStudent(): returned false, didn't check if course was full
        original: enrolledStudentCount++;
                  return false;
        modified: check if course is full before incrementing student count.
                  If full, then return false. Otherwise, increment and return true
    dropStudent(): returned false, didn't check if course was empty
            original: enrolledStudentCount--;
                      return false;
            modified: check if course is empty before decreasing student count.
                      If empty, then return false. Otherwise, decrement and return true
    getCourseLocation() and getInstructorName(): returned incorrect values
            original: getCourseLocation() returned instructor name,
                      getInstructorName() returned course location
            modified: swapped the return statements

    Running PMD:
        --> MissingOverride: method 'toString()' is missing an @Override annotation.
            modified: added @Override before method


Department.java:
    getNumberOfMajors(): returned incorrect value
        original: return -this.numberOfMajors
        modified: return this.numberOfMajors
    getDepartmentChair(): returned incorrect value
        original: returned string "this.departmentChair"
        modified: return this.departmentChair
    dropPersonFromMajor(): didn't check if number of majors is greater than zero
        original: numberOfMajors--;
        modified: if numberOfMajors is greater than 0, then decrement value.
    getDeptCode(): placed before Department object constructor
        modified: moved it below so it can retrieve department code value
    toString(): returned incorrect value
        original: returned string "result.toString()"
        modified: return result.toString()

    Running PMD:
        --> LooseCoupling: Avoid using implementation types like 'HashMap'
            modified: modified HashMap to Map
        --> MissingOverride: method 'toString()' is missing an @Override annotation.
            modified: added @Override before method

IndividualProjectApplication.java:
    No bugs found manually

    Running PMD:
        --> LiteralsFirstInComparisons: Position literals first in String comparisons
            original: arg.equals("setup")
            modified: "setup".equals(arg)
        --> LooseCoupling: Avoid using implementation types like 'HashMap'
            modified: modified HashMap to Map
                      cast Map to HashMap

MyFileDatabase.java:
    Constructor: this.departmentMapping would be uninitialized if flag not 0
                 doesn't check if deSerializeObjectFromFile returns null
        modified: initialized this.departmentMapping to new HashMap<>();
                  checked that deSerializeObjectFromFile didn't return null
    deSerializeObjectFromFile(): else returns null not a Map
        modified: return emtpy Map


    Running PMD:
        --> LooseCoupling:	Avoid using implementation types like 'HashMap'; use the interface instead

RouteController.java:
    retrieveDepartment(): incorrect HTTP status
        modified: swapped HttpStatus.NOT_FOUND and HttpStatus.OK
    retrieveCourse(): incorrect HTTP status
        original: returned HttpStatus.FORBIDDEN
        modified: return HttpStatus.OK
    getMajorCtFromDept(): incorrect HTTP status
        original: returned HttpStatus.FORBIDDEN
        modified: return HttpStatus.NOT_FOUND
    findCourseTime(): incorrect return
        original: "The course meets at: " + "some time "
        modified: "The course meets at: " + requestedCourse.getCourseTimeSlot()

    Running PMD:
        --> LooseCoupling: Avoid using implementation types like 'HashMap'
            modified: departmentMapping and coursesMapping to Map
        --> UnnecessaryImport: unused import 'java.util.HashMap'
            modified: replaced with 'java.util.Map'
        --> UnnecessaryAnnotationValueElement: avoid use of value in annotations when its the only element
            original: @RequestParam(value = "deptCode")
            modified: @RequestParam("deptCode")
        --> UseLocaleWithCaseConversions: When doing a String.toLowerCase()/toUpperCase() call, use Locale
            original: deptCode.toUpperCase()
                      departmentMapping.get(deptCode.toUpperCase())
            modified: deptCode.toUpperCase(Locale.ENGLISH)
                      departmentMapping.get(deptCode.toUpperCase(Locale.ENGLISH))